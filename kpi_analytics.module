<?php

/**
 * @file
 * Contains kpi_analytics.module..
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function kpi_analytics_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the kpi_analytics module.
    case 'help.page.kpi_analytics':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Architecture for making Key Performance Indicators for your website.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Retrieve the Datasource plugins.
 */
function _kpi_datasource_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL) {
  $kpi_datasources = \Drupal::service('plugin.manager.kpi_datasource.processor')
    ->getOptionsList();
  return $kpi_datasources;
}

/**
 * Retrieve the Data formatter plugins.
 */
function _kpi_data_formatter_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL) {
  $kpi_datasources = \Drupal::service('plugin.manager.kpi_data_formatter.processor')
    ->getOptionsList();
  return $kpi_datasources;
}

/**
 * Retrieve the Data visualization plugins.
 */
function _kpi_visualization_allowed_values(FieldStorageDefinitionInterface $definition, FieldableEntityInterface $entity = NULL) {
  $kpi_datasources = \Drupal::service('plugin.manager.kpi_visualization.processor')
    ->getOptionsList();
  return $kpi_datasources;
}

/**
 * Implements hook_preprocess_block().
 */
function kpi_analytics_preprocess_block(&$variables) {

  if ($variables['base_plugin_id'] === 'block_content' &&
    isset($variables['content']['#block_content']) &&
    $variables['content']['#block_content']->bundle() === 'kpi_analytics'
  ) {

    // TODO: work on caching and preferable use the hook below to render the output.
    // TODO: See how we can render this in the template without moving this.
    $variables['content']['kpi_analytics'] = $variables['elements']['kpi_analytics'];
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function kpi_analytics_block_view_block_content_alter(&$build, BlockPluginInterface $block) {
  if ($block_entity = _kpi_analytics_is_kpi_block($block)) {
    $build['kpi_analytics'] = [
      '#lazy_builder' => [
        'kpi_analytics.kpi_builder:build',
        [
          $block_entity->getEntityTypeId(),
          $block_entity->id(),
        ],
      ],
      '#create_placeholder' => TRUE,
    ];
  }
}

/**
 * Checks if a block is a kpi analytics block.
 */
function _kpi_analytics_is_kpi_block(BlockPluginInterface $block) {
  if ($block->getBaseId() === 'block_content') {
    $uuid = preg_replace('/^block_content:/', '', $block->getPluginId());
    // Load the block entity.
    $block_entities = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->loadByProperties(['uuid' => $uuid]);
    if ($block_entity = array_pop($block_entities)) {
      if ($block_entity->bundle() === 'kpi_analytics') {
        return $block_entity;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function kpi_analytics_theme($existing, $type, $theme, $path) {
  return [
    'kpi_analytics_morris_chart' => [
      'template' => 'morris-chart',
      'path' => $path . '/templates',
      'variables' => [
        'type' => NULL,
        'uuid' => NULL,
        'labels' => [],
        'colors' => [],
      ],
    ],
  ];
}

/**
 * Update list on taxonomy vocabularies in the 'field_kpi_term' field.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _kpi_analytics_update_allowed_vocabularies() {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = Drupal::service('entity_field.manager');

  // Get all fields in 'kpi_analytics' bundle of 'block_content' entity type.
  $kpi_analytics_field_definitions = $entity_field_manager
    ->getFieldDefinitions('block_content', 'kpi_analytics');

  // Get 'field_kpi_term' definition and his handler settings.
  /** @var \Drupal\field\Entity\FieldConfig $kpi_term_definition */
  $kpi_term_definition = $kpi_analytics_field_definitions['field_kpi_term'];
  $kpi_term_handler_settings = $kpi_term_definition->getSetting('handler_settings');

  // Get all available vocabularies.
  $vocabularies = Drupal::entityTypeManager()->getStorage('taxonomy_vocabulary')
    ->loadMultiple();

  // Set to the 'field_kpi_term' list of available vocabularies.
  $kpi_term_handler_settings['target_bundles'] = array_map(static function ($value) {
    return $value->id();
  }, $vocabularies);
  $kpi_term_definition->setSetting('handler_settings', $kpi_term_handler_settings);
  $kpi_term_definition->save();
}
